/***************************************************************
 * This file is automatically generated. Please do not modify.
 ***************************************************************/
/* eslint-disable */
// @ts-nocheck

import { type DataSource } from "@prisma/generator-helper";

import { AccountModel } from "./account.js";
import { TodoModel } from "./todo.js";
import {
  generateDatabaseConfig,
  registerModel,
  type Collection,
  type Filter,
  type StringFilter,
} from "accel-record";
import { Attribute, defineEnumTextAttribute } from "accel-record/enums";

declare module "accel-record" {
  function meta<T>(model: T): Meta<T>;

  interface Relation<T, M> {}
}

type Meta<T> = T extends typeof AccountModel | AccountModel
  ? AccountMeta
  : T extends typeof TodoModel | TodoModel
    ? TodoMeta
    : any;

export namespace $Enums {
  export const Status = {
    OPEN: "OPEN",
    CLOSED: "CLOSED",
  } as const;
  export type Status = (typeof Status)[keyof typeof Status];
}

export type Status = $Enums.Status;
export const Status = $Enums.Status;

declare module "./account" {
  interface AccountModel {
    id: number | undefined;
    email: string | undefined;
    passwordDigest: string | undefined;
    createdAt: Date | undefined;
    updatedAt: Date | undefined;
  }
}
export interface NewAccount extends AccountModel {}
export class Account extends AccountModel {}
export interface Account extends AccountModel {
  id: number;
  email: string;
  passwordDigest: string;
  createdAt: Date;
  updatedAt: Date;
}
type AccountAssociationKey = never;
type AccountCollection<T extends AccountModel> =
  | Collection<T, AccountMeta>
  | Collection<Account, AccountMeta>;
type AccountMeta = {
  Base: AccountModel;
  New: NewAccount;
  Persisted: Account;
  PrimaryKey: number;
  AssociationKey: AccountAssociationKey;
  JoinInput: AccountAssociationKey | AccountAssociationKey[];
  Column: {
    id: number;
    email: string;
    passwordDigest: string;
    createdAt: Date;
    updatedAt: Date;
  };
  CreateInput: {
    id?: number;
    email: string;
    passwordDigest?: string;
    password?: string;
    passwordConfirmation?: string;
    createdAt?: Date;
    updatedAt?: Date;
  };
  WhereInput: {
    id?: number | number[] | Filter<number> | null;
    email?: string | string[] | StringFilter | null;
    passwordDigest?: string | string[] | StringFilter | null;
    createdAt?: Date | Date[] | Filter<Date> | null;
    updatedAt?: Date | Date[] | Filter<Date> | null;
  };
};
registerModel(Account);

declare module "./todo" {
  interface TodoModel {
    id: number | undefined;
    title: string | undefined;
    content: string | undefined;
    estimate: number | undefined;
    dueDate: Date | undefined;
    status: Status;
    statusText: string;
    label: string | undefined;
    available: boolean;
    createdAt: Date | undefined;
    updatedAt: Date | undefined;
  }
}
export interface NewTodo extends TodoModel {}
export class Todo extends TodoModel {
  static status = new Attribute(this, "Status", Status);
}
export interface Todo extends TodoModel {
  id: number;
  title: string;
  createdAt: Date;
  updatedAt: Date;
}
type TodoAssociationKey = never;
type TodoCollection<T extends TodoModel> = Collection<T, TodoMeta> | Collection<Todo, TodoMeta>;
type TodoMeta = {
  Base: TodoModel;
  New: NewTodo;
  Persisted: Todo;
  PrimaryKey: number;
  AssociationKey: TodoAssociationKey;
  JoinInput: TodoAssociationKey | TodoAssociationKey[];
  Column: {
    id: number;
    title: string;
    content: string | undefined;
    estimate: number | undefined;
    dueDate: Date | undefined;
    status: Status;
    label: string | undefined;
    available: boolean;
    createdAt: Date;
    updatedAt: Date;
  };
  CreateInput: {
    id?: number;
    title: string;
    content?: string;
    estimate?: number;
    dueDate?: Date;
    status?: Status;
    label?: string;
    available?: boolean;
    createdAt?: Date;
    updatedAt?: Date;
  };
  WhereInput: {
    id?: number | number[] | Filter<number> | null;
    title?: string | string[] | StringFilter | null;
    content?: string | string[] | StringFilter | null;
    estimate?: number | number[] | Filter<number> | null;
    dueDate?: Date | Date[] | Filter<Date> | null;
    status?: Status | Status[] | undefined | null;
    label?: string | string[] | StringFilter | null;
    available?: boolean | boolean[] | undefined | null;
    createdAt?: Date | Date[] | Filter<Date> | null;
    updatedAt?: Date | Date[] | Filter<Date> | null;
  };
};
registerModel(Todo);
defineEnumTextAttribute(TodoModel, Todo, "status");

export const schemaDir = "../../prisma/";
export const sourceFilePath = "../../prisma/schema.prisma";
export const dataSource = {
  name: "db",
  provider: "mysql",
  activeProvider: "mysql",
  url: {
    fromEnvVar: "DATABASE_URL",
    value: null,
  },
  schemas: [],
} as DataSource;

/**
 * Retrieves the database connection settings based on the Prisma schema file.
 */
export const getDatabaseConfig = () =>
  generateDatabaseConfig(dataSource, import.meta.url, schemaDir, sourceFilePath);
