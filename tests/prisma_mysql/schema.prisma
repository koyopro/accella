generator client {
  provider = "prisma-client-js"
}

generator custom_generator {
  provider = "node node_modules/prisma-generator-accel-record"
  output   = "../models"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:@localhost:3306/accel_test1"
}

model User {
  id        Int        @id @default(autoincrement()) @map("_id")
  email     String     @unique
  name      String?
  age       Int?
  posts     Post[]
  setting   Setting?
  teams     UserTeam[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Profile   Profile?
}

model Team {
  id    Int        @id @default(autoincrement())
  name  String
  users UserTeam[]
}

model UserTeam {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  team       Team     @relation(fields: [teamId], references: [id])
  teamId     Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, teamId])
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  content   String?
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int       @map("author_id")
  tags      PostTag[]
}

model PostTag {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

model Setting {
  settingId Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique @map("user_id")
  threshold Float?
  createdAt DateTime @default(now())
  data      Json     @default("{}")
}

enum Role {
  MEMBER
  ADMIN
}

model Profile {
  id      Int     @id @default(autoincrement()) @map("_id")
  user    User    @relation(fields: [userId], references: [id])
  userId  Int     @unique @map("user_id")
  bio     String? @default("I'm a Prisma user!") @map("description")
  point   Int     @default(100)
  enabled Boolean @default(true)
  role    Role    @default(MEMBER)
  // createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP(3)"))
  uuid    String  @default(uuid())
  cuid    String  @default(cuid())

  @@map("profiles")
}

model Company {
  id        Int        @id @default(autoincrement()) @map("_id")
  name      String
  employees Employee[]
}

model Employee {
  id        Int     @id @default(autoincrement())
  name      String
  companyId Int     @map("company_id")
  company   Company @relation(fields: [companyId], references: [id])
}

model ValidateSample {
  id       Int     @id @default(autoincrement())
  accepted Boolean
  pattern  String
  key      String
  count    Int
}
