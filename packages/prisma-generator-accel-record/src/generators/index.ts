import { DMMF, GeneratorOptions } from "@prisma/generator-helper";
import path from "path";
import { generateTypes } from "./type";

export const ACCEL_RECORD_DIR = ".accel-record";
export const SCHEMA_CONFIG_FILE = "index";

export const generateIndex = async (options: GeneratorOptions) => {
  return [
    cautionComment,
    generateExportAllModels(options.dmmf.datamodel.models as DMMF.Model[]),
    await generateTypes(options),
    generateSchema(options),
  ].join("\n");
};

// スキーマ設定ファイルの内容を生成する関数
export function generateSchemaFileContent(options: GeneratorOptions): string {
  const absoluteSchemaDir = path.dirname(options.schemaPath);
  const db = options.datasources.find((v) => v.name == "db");

  if (!["mysql", "postgresql", "sqlite"].includes(db?.provider ?? "")) {
    throw new Error(`db provider must be one of mysql, postgresql, sqlite: ${db?.provider}`);
  }

  const { sourceFilePath, ...dataSource } = db as any;
  const absoluteSourceFilePath = sourceFilePath; // すでに絶対パス

  // 出力内容を作成
  return `
module.exports.schemaDir = "${absoluteSchemaDir.replace(/\\/g, "\\\\")}/";
module.exports.sourceFilePath = "${absoluteSourceFilePath.replace(/\\/g, "\\\\")}";
module.exports.dataSource = ${JSON.stringify(dataSource, null, 2)};
`;
}

const cautionComment = `/* eslint-disable */
/***************************************************************
* This file is automatically generated. Please do not modify.
***************************************************************/

import { schemaDir, dataSource, sourceFilePath } from 'accel-record/schema';
`;

const generateSchema = (options: GeneratorOptions) => {
  const db = options.datasources.find((v) => v.name == "db");
  if (!["mysql", "postgresql", "sqlite"].includes(db?.provider ?? "")) {
    throw new Error(`db provider must be one of mysql, postgresql, sqlite: ${db?.provider}`);
  }
  return `
/**
 * Retrieves the database connection settings based on the Prisma schema file.
 */
export const getDatabaseConfig = () => generateDatabaseConfig(dataSource, import.meta.url, schemaDir, sourceFilePath);
`;
};

export const generateExportAllModels = (models: DMMF.Model[]) => {
  return models
    .map((model) =>
      [`import { ${model.name}Model } from './${toCamelCase(model.name)}.js'`].join("\n")
    )
    .join("\n");
};

export function toCamelCase(str: string): string {
  return str.charAt(0).toLowerCase() + str.slice(1);
}
