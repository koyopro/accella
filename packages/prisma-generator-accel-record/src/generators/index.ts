import { DMMF, GeneratorOptions } from "@prisma/generator-helper";
import { generateTypes } from "./type";

export const generateIndex = async (options: GeneratorOptions) => {
  return [
    cautionComment,
    generateExportAllModels(options.dmmf.datamodel.models as DMMF.Model[]),
    await generateTypes(options),
    generateSchema(options),
  ].join("\n");
};

const cautionComment = `/* eslint-disable */
/***************************************************************
* This file is automatically generated. Please do not modify.
***************************************************************/
`;

const generateSchema = (options: GeneratorOptions) => {
  const db = options.datasources.find((v) => v.name == "db");
  return `
export const dataSource = ${JSON.stringify(db, null, 2)};

export const getDatabaseConfig = () => {
  return {
    type: dataSource.activeProvider,
    datasourceUrl: dataSource.url.value,
  }
}`;
};

export const generateExportAllModels = (models: DMMF.Model[]) => {
  return models
    .map((model) =>
      [`import { ${model.name}Model } from './${toCamelCase(model.name)}.js'`].join("\n")
    )
    .join("\n");
};

export function toCamelCase(str: string): string {
  return str.charAt(0).toLowerCase() + str.slice(1);
}
